package ActionFindElementSelenium;

import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;

import PageObjects.CriarPlanoPageObject;

public class AcoesFindElement {

	/**
	 * Método responsável para a abertura de uma URL. Utiliza a url para abrir uma
	 * página web.
	 */
	public static void openURL(WebDriver driver, String url) {
		driver.get(url);
		driver.manage().window().maximize();
	}

	/**
	 * Recuperar o text da tela.
	 * 
	 * @return
	 */
	public static String getText(WebDriver driver, By by) {
		WebElement element = null;
		element = findElement(driver, by);
		String elementText = element.getText();

		return elementText;
	}

	public static String getValue(WebDriver driver, By by) {
		WebElement element = null;
		element = findElement(driver, by);
		String elementText = element.getAttribute("value");

		return elementText;
	}

	public String getTextStatusQualificado(WebDriver driver, By by) throws InterruptedException {

		for (int i = 0; i <= 70; i++) {
			try {
				WebElement element = null;
				element = findElement(driver, by);
				String elementText = element.getText();

				System.out.println(elementText);

				if (elementText.equals("Qualificado")) {
					return elementText;
				}
			} catch (Exception e) {
				// e.printStackTrace();

				System.out.println(e.getMessage());
			}

			Thread.sleep(1000);

		}

		return "ERRO";
	}

	public String getTextStatusAprovado(WebDriver driver, By by) throws InterruptedException {

		for (int i = 0; i <= 30; i++) {

			WebElement element = null;
			element = findElement(driver, by);
			String elementText = element.getText();

			System.out.println(elementText);

			if (elementText.equals("Aprovado")) {
				return elementText;
			}
			Thread.sleep(1000);
		}

		return "ERRO";
	}

	public void tirarPrintEndereco(WebDriver driver, By by) throws InterruptedException {
		WebElement element = null;
		element = findElement(driver, by);

		element.sendKeys(Keys.ARROW_UP);
		element.sendKeys(Keys.ARROW_UP);
		element.sendKeys(Keys.ARROW_UP);
		Thread.sleep(1000);
	}

	public void subirBarra(WebDriver driver, By by) throws InterruptedException {
		WebElement element = null;
		element = findElement(driver, by);

		element.sendKeys(Keys.ARROW_DOWN);
		element.sendKeys(Keys.ARROW_DOWN);
		Thread.sleep(1000);
	}

	/**
	 * Método responsável pelo preenchimento de campos do tipo INPUT. Utiliza o By
	 * para localizar o componente.
	 * 
	 * @return Retorna o componente alterado.
	 */
	public WebElement fillInput(WebDriver driver, By by, String valor) {

		int timeout = 25;
		while (!(timeout <= 0)) {
			timeout--;
			try {

				WebDriverWait wait = new WebDriverWait(driver, 30);

				wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(by));

				WebElement element = findElement(driver, by);
				element.click();
				element.clear();
				element.sendKeys(valor.trim());
				return element;

			} catch (Exception e) {
				System.out.println("Erro na acao de input do framework");
			}
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		return null;
	}

	public WebElement fillInputClear(WebDriver driver, By by, String valor) {

		WebDriverWait wait = new WebDriverWait(driver, 30);

		wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(by));

		WebElement element = findElement(driver, by);
		element.click();
		element.clear();
		element.sendKeys(valor);
		return element;

	}

	public WebElement fillInputSOClear(WebDriver driver, By by) {

		WebDriverWait wait = new WebDriverWait(driver, 30);

		wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(by));

		WebElement element = findElement(driver, by);
		// element.click();
		element.clear();
		return element;

	}

	/**
	 * Método responsável pelo preenchimento de campos do tipo SELECT. Utiliza o By
	 * para localizar o componente.
	 * 
	 * @return
	 */
	public WebElement fillInputSelect(WebDriver driver, By by, String opcao) {
		int timeout = 25;
		while (!(timeout <= 0)) {
			timeout--;
			try {
				WebElement element = null;
				Select select = null;
				element = findElement(driver, by);
				select = new Select(element);
				select.selectByVisibleText(opcao);
				return element;

			} catch (Exception e) {
				System.out.println(e.getCause());
			}
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}

	/**
	 * Método responsável pela execução do clique no componente. Utiliza o By
	 * informado para localizar o componente.
	 * 
	 * @return Retorna o componente clicado.
	 * @throws InterruptedException
	 */
	public void click(WebDriver driver, By by) {

		int timeout = 100;
		while (!(timeout <= 0)) {
			timeout--;
			try {
				WebElement element = (new WebDriverWait(driver, 10)).until(ExpectedConditions.elementToBeClickable(by));
				// WebElement element = driver.findElement(by);
				// Thread.sleep(1000);
				Actions actions = new Actions(driver);
				WebElement mainMenu = element;
				actions.moveToElement(mainMenu).build().perform();
				element.click();
				return;
			} catch (Exception e) {
				System.err.println("Erro na acao de click");
				driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			}

		}

		Assert.fail("Erro na acao de click do framework");
		;

	}

	public static WebElement mover(WebDriver driver, By by) {

		int timeout = 150;
		while (!(timeout <= 0)) {
			timeout--;
			try {
				WebElement element = (new WebDriverWait(driver, 10)).until(ExpectedConditions.elementToBeClickable(by));
				Thread.sleep(50);
				Actions actions = new Actions(driver);
				WebElement mainMenu = element;
				actions.moveToElement(mainMenu).build().perform();
				return element;
			} catch (Exception e) {
				System.out.println("Erro na acao e click do framework");
			}
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		return null;

	}

	/**
	 * Método responsável pela localização do componente. Utiliza o By informado
	 * para localizar o componente. Capaz de ignorar erros do tipo
	 * NoSuchElementException e StaleElementReferenceException
	 * 
	 * @return O Elemento buscado
	 */
	public static WebElement findElement(WebDriver driver, final By by) {

		int i = 1;
		int Constantes_MAX_SEGUNDOS = 5;
		WebElement element = null;
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(5, TimeUnit.SECONDS)/*
																									 * Esperando 25
																									 * segundos para que
																									 * o elemento esteja
																									 * presente na
																									 * página
																									 */
				.pollingEvery(1, TimeUnit.SECONDS)/* Verificando por sua presença uma vez a cada 1 segundos */
				.ignoring(NoSuchElementException.class).ignoring(StaleElementReferenceException.class)
				.ignoring(TimeoutException.class);
		try {
			while (element == null && i < Constantes_MAX_SEGUNDOS) {
				try {
					if (null != ExpectedConditions.visibilityOfElementLocated(by)) {
						element = wait.until(new Function<WebDriver, WebElement>() {
							public WebElement apply(WebDriver driver) {
								return driver.findElement(by);
							}
						});
						if (element.getText().equals("Nenhum registro encontrado")) {
							element = null;
						}
					}
				} catch (Exception ex) {
					System.out.println(ex.getMessage());
					i++;
					element = null;
					continue;
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			Assert.assertNotNull("Elemento não foi encontrado", ex);
		}
		return element;
	}

	/**
	 * Método responsável por copiar para área de transaferência
	 * 
	 * @param texto a ser copiado
	 **/
	public static void copiaParaClipBoard(String text) {
		StringSelection ss = new StringSelection(text);
		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
	}

	public boolean selectDropdown(WebDriver driver, By xpath, String opcaoSelecionada) throws InterruptedException {
		click(driver, xpath);
		String opcao = xpath.toString();
		opcao.replaceAll("div[2]/span", "div[3]/div/ul/li");
		opcao.replaceAll("xpath", "");
		String descItem;
		int quantidadeDeItens = driver
				.findElements(By.xpath("//p-dropdown[@id='drpDwnProcessTypes']/div/div[3]/div/ul/li")).size();
		for (int item = 1; item <= quantidadeDeItens; item++) {
			descItem = findElement(driver, By.xpath(opcao + "[" + item + "]/span")).getText();
			if (opcaoSelecionada.toUpperCase().trim().equals(descItem.toUpperCase())) {
				// Assert.assertTrue(true);
				click(driver,
						By.xpath("//p-dropdown[@id='drpDwnProcessTypes']/div/div[3]/div/ul/li[" + item + "]/span"));
				return true;
			}
		}
		return false;
	}

	public boolean contemStatus(String elemento, String status) {
		return elemento.contains(status);
	}

	public void waitForLoad(final WebDriver driver) {
		final WebElement loading = findElement(driver, By.id("loading-login"));
		while (loading.getAttribute("ng-reflect-show") == "true") {
			// timeout(1);
		}
	}

	public void waitForPageLoad(WebDriver driver) {
		WebDriverWait wait = new WebDriverWait(driver, 60);
		try {
			WebElement loading = findElement(driver, By.className("backdrop"));
			if (loading != null) {
				// setLoading(true);
			}
			wait.until(ExpectedConditions.invisibilityOfElementLocated(By.className("backdrop")));
		} catch (TimeoutException ex) {
			Assert.assertTrue("O load excedeu o tempo limite", null == ex);
		}
	}

	// Verifica se tem um alert na tela a cada 3 segundos durante 10 tentativas
	public boolean isAlertPresent(WebDriver driver, By by) {
		boolean result = false;
		for (int i = 1; i <= 10; i++) {
			try {
				WebElement dialog = findElement(driver, by);
				result = dialog.isDisplayed();
				if (result == true) {
					break;
				} else {
					// timeout(3);
					System.out.println("Nennhum alert encontrado - " + result + i);
				}
			} catch (final Exception e) {
			}
		}
		return result;
	}

	// Verifica se tem um modal na tela a cada 3 segundos durante 10 tentativas
	public boolean isModalPresent(WebDriver driver, By by) {
		boolean result = false;
		for (int i = 1; i <= 10; i++) {
			try {
				final WebElement dialog = findElement(driver, by);
				result = dialog.isDisplayed();
				if (result == true) {
					break;
				} else {
					// timeout(3);
					System.out.println("Nennhum modal encontrado - " + result + i);
				}
			} catch (final Exception e) {
			}
		}
		return result;
	}

	public static void radiobutton_Select(WebElement Radio) {
		boolean checkstatus;
		checkstatus = Radio.isSelected();
		if (checkstatus == true) {
			System.out.println("RadioButton is already checked");
		} else {
			Radio.click();
			System.out.println("Selected the Radiobutton");
		}
	}

	public static void checkbox_Unchecking(WebElement checkbox) {
		boolean checkstatus;
		checkstatus = checkbox.isSelected();
		if (checkstatus == true) {
			checkbox.click();
			System.out.println("Checkbox is unchecked");
		} else {
			System.out.println("Checkbox is already unchecked");
		}
	}

	public static void radioButton_Deselect(WebElement Radio) {
		boolean checkstatus;
		checkstatus = Radio.isSelected();
		if (checkstatus == true) {
			Radio.click();
			System.out.println("Radio Button is deselected");
		} else {
			System.out.println("Radio Button was already Deselected");
		}
	}

	public static void dragAndDrop(WebDriver driver, WebElement fromWebElement, WebElement toWebElement) {
		Actions builder = new Actions(driver);
		builder.dragAndDrop(fromWebElement, toWebElement);
	}

	public static void dragAndDrop_Method2(WebDriver driver, WebElement fromWebElement, WebElement toWebElement) {
		Actions builder = new Actions(driver);
		Action dragAndDrop = builder.clickAndHold(fromWebElement).moveToElement(toWebElement).release(toWebElement)
				.build();
		dragAndDrop.perform();
	}

	public static void dragAndDrop_Method3(WebDriver driver, WebElement fromWebElement, WebElement toWebElement)
			throws InterruptedException {
		Actions builder = new Actions(driver);
		builder.clickAndHold(fromWebElement).moveToElement(toWebElement).perform();
		Thread.sleep(2000);
		builder.release(toWebElement).build().perform();
	}

	public static void hoverWebelement(WebDriver driver, WebElement HovertoWebElement) throws InterruptedException {
		Actions builder = new Actions(driver);
		builder.moveToElement(HovertoWebElement).perform();
		Thread.sleep(2000);
	}

	public static void doubleClickWebelement(WebDriver driver, WebElement doubleclickonWebElement)
			throws InterruptedException {
		Actions builder = new Actions(driver);
		builder.doubleClick(doubleclickonWebElement).perform();
		Thread.sleep(2000);

	}

	public static String getToolTip(WebElement toolTipofWebElement) throws InterruptedException {
		String tooltip = toolTipofWebElement.getAttribute("title");
		System.out.println("Tool text : " + tooltip);
		return tooltip;
	}

	public static void selectElementVisibleText(WebDriver driver, By by, String Name) {
		WebElement element = driver.findElement(by);
		Select selectitem = new Select(element);
		selectitem.selectByVisibleText(Name);
	}

	public static void selectElementByValueMethod(WebElement webElement, String value) {

		Select selectitem = new Select(webElement);
		selectitem.selectByValue(value);
	}

	public static void selectElementByIndexMethod(WebDriver driver, By by, int index) {
		WebElement elementIndex = driver.findElement(by);
		Select selectitem = new Select(elementIndex);
		selectitem.selectByIndex(index);
	}

	public static void clickCheckboxFromList(WebDriver driver, By xpathOfElement, String valueToSelect) {
		List<WebElement> lst = driver.findElements(xpathOfElement);
		System.out.println(lst.size());
		for (int i = 0; i < lst.size(); i++) {
			List<WebElement> dr = lst.get(i).findElements(By.className("label"));
			// System.out.println(dr.get(0));
			for (WebElement f : dr) {
				System.out.println("value in the list : " + f.getText());
				// if (valueToSelect.equals(f.getText())) {
				f.click();
				break;
				// }
			}
		}
	}

	public static boolean isElementPresent(WebDriver driver, By by) {
		try {
			driver.findElement(by);
			return true;
		} catch (NoSuchElementException e) {
			return false;
		}
	}

	public void scroll(WebDriver driver, int ammount) {
		JavascriptExecutor jse2 = (JavascriptExecutor) driver;
		jse2.executeScript("window.scrollBy(0," + ammount + ")", "");
	}

	public static void clickCheckbox(WebDriver driver, By by, String valorSouN) {

		List<WebElement> allCheckbox = driver.findElements(by);

		for (WebElement checkbox : allCheckbox) {
			if (checkbox.isSelected() == true) {

				System.out.println("RadioButton is already checked");

			} else {
				if (checkbox.getAttribute("value").equals(valorSouN)) {
					checkbox.click();
					System.out.println("Selected the Radiobutton");
				}
			}
		}
	}

	public static void clickCheckboxTableSubTipos(WebDriver driver, String opacaoCheckbox) {
		int i = 2;
		List<WebElement> allCheckboxSubTiposClientes = driver.findElements(By.name("subTipoClienteList[]"));
		for (WebElement checkbox : allCheckboxSubTiposClientes) {
			WebElement CheckboxText = driver
					.findElement(By.xpath("//TD[@id='subtipos-cliente']/TABLE/TBODY/TR[" + i + "]/TD[2]"));
			String ValueText = CheckboxText.getText().replaceAll(" ", "");
			System.out.println(ValueText);
			if (ValueText.equals(opacaoCheckbox)) {
				if (checkbox.isSelected() == false) {
					checkbox.click();
				}
			} else {
				if (checkbox.isSelected() == true) {
					checkbox.click();
				}
			}
			i++;
		}
	}
	
	public static void clickCheckboxTableCanalVenda(WebDriver driver, String opacaoCheckbox) {
		List<WebElement> allCheckboxSubTiposClientes = driver.findElements(By.name("channelList[]"));

		int ii = 1;
		int i = 3;
		for (WebElement checkbox : allCheckboxSubTiposClientes) {
			if (ii >= 4) {
				if (i >= 6) {
					return;
				}
				ii = 1;
				i++;
			}
			WebElement CheckboxText = driver
					.findElement(By.xpath("//TABLE[@id='tbCanal']/TBODY/TR[" + i + "]/TD[" + ii + "]"));
			String ValueText = CheckboxText.getText().replaceAll(" ", "");
			System.out.println(ValueText);
			if (opacaoCheckbox.equals("Todos")) {
				System.out.println("oi");
				if (checkbox.isSelected() == false) {
					checkbox.click();
				}
			} else {
				if (checkbox.isSelected() == true) {
					checkbox.click();
				}
			}
			ii++;
		}
	}
	
	
	public static void clickCheckboxTableEstados(WebDriver driver, String opacaoCheckbox) {
		List<WebElement> allCheckboxSubTiposClientes = driver.findElements(By.name("idUfs@4"));

		int ii = 1;
		int i = 3;
		for (WebElement checkbox : allCheckboxSubTiposClientes) {
			if (ii >= 11) {
				if (i >= 6) {
					return;
				}
				ii = 1;
				i++;
			}
			WebElement CheckboxText = driver
					.findElement(By.xpath("//TABLE[@id='tbEstados']/TBODY/TR[" + i + "]/TD[" + ii + "]"));
			String ValueText = CheckboxText.getText().replaceAll(" ", "");
			System.out.println(ValueText);
			if (opacaoCheckbox.equals("Todos")) {
				System.out.println("oi");
				if (checkbox.isSelected() == false) {
					checkbox.click();
				}
			} else {
				if (checkbox.isSelected() == true) {
					checkbox.click();
				}
			}
			ii++;
		}
	}


}
