package Report;

import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import ConstantsFramework.Constants_Framework;


public class Pdf {
	private static String FILE=Constants_Framework.PDF_PATH;
	Document document;
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	@SuppressWarnings("unused")
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	@SuppressWarnings("rawtypes")
	public Pdf(ArrayList prints, String nome_cenario) {
		//rodrigo.c.almeida
		try {
			DateFormat dateFormat = new SimpleDateFormat("yy-MM-dd HH-mm-ss");
			Date date = new Date();
			document = new Document(PageSize.A4_LANDSCAPE);
			//PdfWriter.getInstance(document, new FileOutputStream(FILE+nome_cenario+"_"+ dateFormat.format(date)+".pdf"));
			PdfWriter.getInstance(document, new FileOutputStream(FILE+nome_cenario+"_"+ dateFormat.format(date)+".pdf"));
			document.open();
			addMetaData(document);
			addContent(document,nome_cenario);
			for (int i = 0; i < prints.size(); i++) {
				addImage(document, (String) prints.get(i));
			}
			addTitlePage(document);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void addImage(Document document, String nome)
			throws MalformedURLException, IOException, DocumentException {
		Image figura = Image.getInstance(nome);
		int indentation = 0;
		float scaler = ((document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin()
				- indentation) / figura.getWidth()) * 100;
		figura.scalePercent(scaler);
		document.add(figura);

	}

	private static void addMetaData(Document document) {
		document.addTitle("Relat�rio Selenium");
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("rodrigo.c.almeida");
		document.addCreator("rodrigo.c.almeida");
	}

	private static void addTitlePage(Document document) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		// preface.add(new Paragraph("Relat�rio Evid�ncias", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		//preface.add(new Paragraph("Relatório gerado por: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		//		smallBold));
		addEmptyLine(preface, 3);
		// preface.add(new Paragraph(
		// "This document describes something which is very important ",
		// smallBold));

		addEmptyLine(preface, 8);

		// preface.add(new Paragraph(
		// "This document is a preliminary version and not subject to your license
		// agreement or any other agreement with vogella.com ;-).",
		// redFont));

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private static void addContent(Document document, String nome_cenario) throws DocumentException, MalformedURLException, IOException {
		//rodrigo.c.almeida
		//Anchor anchor = new Anchor("Relatório Evidências", catFont);
		Anchor anchor = new Anchor(nome_cenario, catFont);
		anchor.setName("Relatório Evidências");
		// addImage(document, "C:\\Evidencias_Selenium\\Prints\\bradesco.png");

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		@SuppressWarnings("unused")
		Paragraph subPara = new Paragraph("Subcategory 1", subFont);
		// Section subCatPart = catPart.addSection(subPara);
		// subCatPart.add(new Paragraph("Hello"));

		subPara = new Paragraph("Subcategory 2", subFont);
		// subCatPart = catPart.addSection(subPara);
		// subCatPart.add(new Paragraph("Paragraph 1"));
		// subCatPart.add(new Paragraph("Paragraph 2"));
		// subCatPart.add(new Paragraph("Paragraph 3"));

		// add a list
		// createList(subCatPart);
		// Paragraph paragraph = new Paragraph();
		// addEmptyLine(paragraph, 5);
		// subCatPart.add(paragraph);

		// add a table
		// createTable(subCatPart);

		// now add all this to the document
		// document.add(catPart);

		// Next section
		// anchor = new Anchor("Second Chapter", catFont);
		// anchor.setName("Second Chapter");

		// Second parameter is the number of the chapter
		catPart = new Chapter(new Paragraph(anchor), 1);

		// subPara = new Paragraph("Subcategory", subFont);
		// subCatPart = catPart.addSection(subPara);
		// subCatPart.add(new Paragraph("This is a very important message"));

		// now add all this to the document
		//Image figura = Image.getInstance("C:\\Evidencias_Selenium\\bradesco.png");
		//figura.setWidthPercentage(20);
		// document.add(figura);
		//figura.setWidthPercentage(20);
		// catPart.add(figura);
		document.add(catPart);

	}

	@SuppressWarnings("unused")
	private static void createTable(Section subCatPart) throws BadElementException {
		PdfPTable table = new PdfPTable(3);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

		PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 2"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 3"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		table.setHeaderRows(1);

		table.addCell("1.0");
		table.addCell("1.1");
		table.addCell("1.2");
		table.addCell("2.1");
		table.addCell("2.2");
		table.addCell("2.3");

		subCatPart.add(table);

	}

	@SuppressWarnings("unused")
	private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	

}
